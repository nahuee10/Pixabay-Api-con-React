{"version":3,"sources":["componentes/Buscador.js","componentes/Imagen.js","componentes/Paginacion.js","componentes/Resultados.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","termino","current","value","props","datosBusqueda","onSubmit","this","className","ref","type","placeholder","Component","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","target","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultados","mostrarImagenes","imagenes","length","console","log","Fragment","map","key","id","App","state","pagina","scroll","document","querySelector","scrollIntoView","setState","consultarApi","url","fetch","then","respuesta","json","resultado","hits","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.786c97c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Buscador extends Component {\r\n   \r\n   busquedaRef = React.createRef();\r\n\r\n   obtenerDatos = (e) => {\r\n      e.preventDefault();\r\n      \r\n      // Tomamos valor de input\r\n      const termino = this.busquedaRef.current.value;\r\n      \r\n      // Lo enviamos al componente principal\r\n      this.props.datosBusqueda(termino);\r\n   }\r\n   \r\n   render() { \r\n      return (\r\n         <form onSubmit={this.obtenerDatos}>\r\n            <div className=\"row\">\r\n               \r\n               <div className=\"form-gourp col-md-8\">\r\n                  <input ref={this.busquedaRef} type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Busca tu Imagen. Ejemplo: Futbol\"/>\r\n               </div>\r\n               <div className=\"form-gourp col-md-4\">\r\n                  <input type=\"submit\" className=\"btn btn-lg btn-danger btn-block\" value=\"Buscar..\"/>\r\n               </div>\r\n            </div>\r\n         </form>\r\n        );\r\n   }\r\n}\r\n \r\nexport default Buscador;","import React from 'react';\r\n\r\nconst Imagen = (props) => {\r\n\r\n   const {largeImageURL, likes, previewURL, tags, views} = props.imagen;\r\n\r\n   return (\r\n      <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n         <div className=\"card\">\r\n            <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n            <div className=\"card-body\">\r\n               <p className=\"card-text\">{likes} Me gusta</p>\r\n               <p className=\"card-text\">{views} Vistas</p>\r\n               \r\n               <a href={largeImageURL} target=\"_blank\" className=\"btn btn-primary btn-block\">Ver Imagen\r\n               </a>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Imagen;","import React from 'react';\r\n\r\nconst Paginacion = props => {\r\n   return (\r\n      <div className=\"py-3\">\r\n         <button onClick={props.paginaAnterior} type=\"button\" className=\"btn btn-info mr-1\">Anterior &larr;</button>\r\n         <button onClick={props.paginaSiguiente} type=\"button\" className=\"btn btn-info mr-1\">Siguiente &rarr;</button>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Paginacion;","import React, { Component } from 'react';\r\nimport Imagen from './Imagen';\r\nimport Paginacion from './Paginacion';\r\n\r\nclass Resultados extends Component {\r\n   mostrarImagenes = () => {\r\n      \r\n      const imagenes = this.props.imagenes;\r\n      \r\n      if (imagenes.length === 0) return null;\r\n\r\n      console.log(imagenes);\r\n      return (\r\n         <React.Fragment>\r\n            <div className=\"col-12 p-5 row\">\r\n               {imagenes.map(imagen => (\r\n                  <Imagen\r\n                     key={imagen.id}\r\n                     imagen={imagen}\r\n                  />\r\n               ) ) }\r\n            </div>\r\n            <Paginacion\r\n               paginaAnterior={this.props.paginaAnterior}\r\n               paginaSiguiente = {this.props.paginaSiguiente}\r\n            />\r\n         </React.Fragment>\r\n      )\r\n      \r\n   }\r\n   render() { \r\n      return ( \r\n         <React.Fragment>\r\n            {this.mostrarImagenes()}\r\n         </React.Fragment>\r\n       );\r\n   }\r\n}\r\n \r\nexport default Resultados;","// @ts-nocheck\nimport React, { Component } from 'react';\nimport Buscador from './componentes/Buscador';\nimport Resultados from './componentes/Resultados';\n\nimport './assets/bootstrap.min.css';\n\n\nclass App extends Component {\n\n  state = {\n    termino: '',\n    imagenes: [],\n    pagina: ''\n  }\n\n  scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView('smooth', 'start');\n  }\n\n  paginaAnterior = () => {\n    let pagina = this.state.pagina;\n\n    // Si la pagina es 1, no ir hacia atras\n    if (pagina === 1) return null;\n    // Sumar uno a la pagina actual\n    pagina -= 1;\n    \n    // Agregar el cambio al state\n    this.setState({\n      pagina\n    }, () => {\n        this.consultarApi();\n        this.scroll();\n    });\n    \n    //console.log(pagina);\n  }\n  \n\n  paginaSiguiente = () => {\n    // Leer state de la pagina actual\n    let pagina = this.state.pagina;\n\n    // Sumar uno a la pagina actual\n    pagina += 1;\n    \n    // Agregar el cambio al state\n    this.setState({\n      pagina\n    }, () => {\n        this.consultarApi();\n        this.scroll();\n    });   \n    \n    //console.log(pagina);\n  }\n\n  consultarApi = () => {\n    const termino = this.state.termino;\n    const pagina = this.state.pagina;\n    const url = `https://pixabay.com/api/?key=16141488-0f35bf6e95e2ddddc378b682b&q=${termino}&per_page=30&page=${pagina}`;\n    \n    // console.log(url);\n\n    fetch(url)\n      .then(respuesta => respuesta.json())\n      .then(resultado => this.setState({ imagenes: resultado.hits }) )\n  }\n  \n  datosBusqueda = (termino) => {\n    this.setState({\n      termino: termino,\n      pagina: 1\n    }, () => {\n        this.consultarApi();\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app container\">\n        <div className=\"jumbotron\">\n            <p className=\"lead text-center\">Buscador de imagenes</p>\n\n            <Buscador\n              datosBusqueda={this.datosBusqueda}\n            />\n        </div>\n            \n        <div className=\"row justify-content-center\">\n              <Resultados\n            imagenes={this.state.imagenes}\n            paginaAnterior={this.paginaAnterior}\n            paginaSiguiente = {this.paginaSiguiente}\n              />\n        </div>\n      </div>\n    );\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}